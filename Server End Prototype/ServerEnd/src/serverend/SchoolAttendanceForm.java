/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serverend;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class SchoolAttendanceForm extends javax.swing.JFrame {

    /**
     * Creates new form SchoolAttendanceForm
     */
    DefaultTableModel model;
    String binary;
    String hex = "";
    Date searchDate;
    int SchoolId = 0;
    String TeacherPhoneNo = "";

    public SchoolAttendanceForm() {
        initComponents();
        //hexToBinary();
        InitTableWithData();
        model = (DefaultTableModel) attendancePerSchool.getModel();
    }

    String hexToBinary(String x) {

        long decimal = Long.parseLong(x, 16);
        binary = Long.toBinaryString(decimal);

        StringBuilder sb = new StringBuilder(binary);

        binary = sb.reverse().toString();

        return binary;
    }

    public void InitTableWithData() {

        /*try {
            ConnectDatabase obj = new ConnectDatabase();
            obj.connectDB();
            
            //query by Maliha
            
            Statement statement = obj.connection.createStatement();
            /*ResultSet resultset = statement.executeQuery("select StyleNo,IssueDate,CompletingDate from CompletedOrders "
                    + "where CompletingDate>'" + searchDate + "' "
                    + "order by CompletingDate DESC");*/
        //work to be done by maliha
        /*Object rowData[] = new Object[3];
            while (resultset.next()) {
                rowData[0] = resultset.getString("StyleNo");
                rowData[1] = resultset.getDate("IssueDate");
                rowData[2] = resultset.getDate("CompletingDate");
                model.addRow(rowData);
            }
            
            
        } catch (Exception ex) {
           // Logger.getLogger(CompletedOrderJava.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        monthComboBox = new javax.swing.JComboBox<>();
        schoolComboBox = new javax.swing.JComboBox<>();
        yearComboBox = new javax.swing.JComboBox<>();
        dayComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        attendancePerStudent = new javax.swing.JTable();
        showButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        attendancePerSchool = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        for(int i=1; i<13; i++){
            monthComboBox.addItem(new Integer(i).toString());
        }
        monthComboBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        monthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboBoxActionPerformed(evt);
            }
        });

        try{
            ConnectDatabase obj = new ConnectDatabase();
            obj.connectDB();
            Statement statement = obj.connection.createStatement();
            ResultSet resultset = statement.executeQuery("select SchoolName from School order by SchoolName");

            ArrayList<String> ar = new ArrayList<String>();
            String x;
            while(resultset.next())
            {
                x=new String(resultset.getString("SchoolName"));
                ar.add(x);
            }
            int sz=ar.size();
            for(int i=0;i<sz;i++)schoolComboBox.addItem(ar.get(i));
        }catch (Exception ex) {

            ex.printStackTrace();
            System.out.print("??");
        }
        schoolComboBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        for(int i=2018; i<30000; i++){
            yearComboBox.addItem(new Integer(i).toString());
        }
        yearComboBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        for(int i=1; i<32; i++){
            dayComboBox.addItem(new Integer(i).toString());
        }
        dayComboBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        attendancePerStudent.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        attendancePerStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Attendance"
            }
        ));
        attendancePerStudent.setRowHeight(24);
        jScrollPane1.setViewportView(attendancePerStudent);

        showButton.setText("Show");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        attendancePerSchool.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        attendancePerSchool.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Id", "Student Name", "Attendance"
            }
        ));
        attendancePerSchool.setRowHeight(24);
        attendancePerSchool.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attendancePerSchoolMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(attendancePerSchool);
        if (attendancePerSchool.getColumnModel().getColumnCount() > 0) {
            attendancePerSchool.getColumnModel().getColumn(2).setHeaderValue("Attendance");
        }

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(schoolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(492, 492, 492)
                .addComponent(dayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(monthComboBox, 0, 46, Short.MAX_VALUE)
                .addGap(28, 28, 28)
                .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(111, 111, 111)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(661, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schoolComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(yearComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                            .addComponent(monthComboBox))
                        .addGap(4, 4, 4)))
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showButton)
                .addGap(24, 24, 24))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(154, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(60, 60, 60)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        // TODO add your handling code here:
        int year = new Integer((yearComboBox.getSelectedItem().toString()));
        int month = new Integer(monthComboBox.getSelectedItem().toString());
        int day = new Integer(dayComboBox.getSelectedItem().toString());

        searchDate = new Date(year - 1900, month - 1, day);

        try {
            // TODO add your handling code here:
            String SchoolName = schoolComboBox.getSelectedItem().toString();
            ConnectDatabase obj = new ConnectDatabase();
            obj.connectDB();
            Statement statement = obj.connection.createStatement();
            SchoolId = 0;
            ResultSet resultset = statement.executeQuery("select SchoolId from School where SchoolName='" + SchoolName + "'");
            while (resultset.next()) {
                SchoolId = resultset.getInt("SchoolId");
            }
            TeacherPhoneNo = "";
            resultset = statement.executeQuery("select PhoneNo from Teacher where SchoolId=" + SchoolId);
            while (resultset.next()) {
                TeacherPhoneNo = resultset.getString("PhoneNo");
            }
            hex = "";
            resultset = statement.executeQuery("select Attendance from Attendance_Table where SchoolId=" + SchoolId + " and TeacherPhoneNo='" + TeacherPhoneNo + "' and Date='" + searchDate + "'");
            while (resultset.next()) {
                hex = resultset.getString("Attendance");
            }
            resultset = statement.executeQuery("select StudentId, StudentName from Student where SchoolId=" + SchoolId + " order by StudentId");

            System.out.println(hex);
            Object[] rowData = new Object[3];

            String bin = hexToBinary(hex);
            int i = 0;
            while (resultset.next()) {
                rowData[0] = resultset.getInt("StudentId");
                rowData[1] = resultset.getString("StudentName");
                if (bin.charAt(i) == '0' && i < bin.length()) {
                    rowData[2] = "Absent";
                } else {
                    rowData[2] = "Present";
                }
                i++;

                model.addRow(rowData);

            }

        } catch (SQLException ex) {
            Logger.getLogger(SchoolAttendanceForm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_showButtonActionPerformed

    private void attendancePerSchoolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendancePerSchoolMouseClicked
        try {
            DefaultTableModel models = (DefaultTableModel) attendancePerStudent.getModel();
            models.setRowCount(0);
            // TODO add your handling code here:
            int x = (Integer) model.getValueAt(attendancePerSchool.getSelectedRow(), 0);
            //int x = new Integer(s).intValue();

            ConnectDatabase obj = new ConnectDatabase();
            obj.connectDB();
            Statement statement = obj.connection.createStatement();
            ResultSet resultset = statement.executeQuery("select Attendance, Date from Attendance_Table where SchoolId=" + SchoolId + " and Date like '20__-07-__' and TeacherPhoneNo='" + TeacherPhoneNo + "'");

            Object[] amarRowData = new Object[2];
            while (resultset.next()) {
                amarRowData[0] = resultset.getDate("Date");
                String binStr = hexToBinary(resultset.getString("Attendance"));

                if (binStr.charAt(x - 1) == '1') {
                    amarRowData[1] = "Present";
                } else {
                    amarRowData[1] = "Absent";
                }

                models.addRow(amarRowData);
            }

        } catch (SQLException ex) {
            Logger.getLogger(SchoolAttendanceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_attendancePerSchoolMouseClicked

    private void monthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthComboBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          new HomeFrame().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SchoolAttendanceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SchoolAttendanceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SchoolAttendanceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SchoolAttendanceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SchoolAttendanceForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable attendancePerSchool;
    private javax.swing.JTable attendancePerStudent;
    private javax.swing.JComboBox<String> dayComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> monthComboBox;
    private javax.swing.JComboBox<String> schoolComboBox;
    private javax.swing.JButton showButton;
    private javax.swing.JComboBox<String> yearComboBox;
    // End of variables declaration//GEN-END:variables
}
